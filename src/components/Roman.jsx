/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 roman3d.gltf 
Author: engine9 (https://sketchfab.com/engine9)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/rhetorician-a89f035291d843069d73988cc0e25399
Title: Rhetorician
*/

import React, { useRef, useLayoutEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import gsap from "gsap";
import { useThree } from "@react-three/fiber";
import { ScrollTrigger } from "gsap/ScrollTrigger";
//import { useControls } from 'leva'
gsap.registerPlugin(ScrollTrigger);

export default function Model(props) {
  const roman = useRef();
  const { nodes, materials, animations } = useGLTF("/roman3d.gltf");
  const { actions } = useAnimations(animations, roman);
  const { scene, camera } = useThree();
  const screen = window.screen.width;
  const tl = gsap.timeline();

  useLayoutEffect(() => {
    new ScrollTrigger({});
    tl.to(camera.position, {
      x: screen > 700 ? 45.85 : 45.85,
      y: screen > 700 ? 0 : 0,
      z: screen > 700 ? 45 : 43,
      scrollTrigger: {
        trigger: "#about",
        start: "top bottom",
        end: "top top",
        scrub: true,
        immediateRender: false,
      },
    })
      .to(scene.position, {
        x: screen > 700 ? -17.3 : -16.3,
        y: screen > 700 ? -1.5 : -1.5,
        z: screen > 700 ? -3 : -3,
        scrollTrigger: {
          trigger: "#about",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.rotation, {
        x: screen > 700 ? 0.03 : 0.03,
        y: screen > 700 ? 1.6 : 1.6,
        z: screen > 700 ? 0.01 : 0.01,
        scrollTrigger: {
          trigger: "#about",
          start: "top bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(camera.position, {
        x: screen > 700 ? 68.5 : 77,
        y: screen > 700 ? 1.3 : 1.4,
        z: screen > 700 ? 38 : 55,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#title-reveal",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.position, {
        x: screen > 700 ? -3.3 : -5,
        y: screen > 700 ? -1.1 : -1.2,
        z: screen > 700 ? 1 : .8,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#title-reveal",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.rotation, {
        x: 0,
        y: screen > 700 ? 1 : .9,
        z: 0,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#title-reveal",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(camera.position, {
        x: screen > 700 ? 72.5 : 80,
        y: screen > 700 ? -0.7 : -0.1,
        z: screen > 700 ? 8 : 1,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#works",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
          markers:true,
        },
      })
      .to(scene.position, {
        x: screen > 700 ? 3 : -9,
        y: screen > 700 ? -1.3 : -2,
        z: screen > 700 ? -0.7 : -0.3,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#works",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      }).to(scene.rotacion, {
        x: 0,
        y: screen > 700 ? 1 : .8,
        z: 0,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#works",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(camera.position, {
        x: screen > 700 ? 74.5 : 70,
        y: screen > 700 ? 0.8 : 1,
        z: screen > 700 ? 20 : 22,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#contact",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.position, {
        x: screen > 700 ? -20 : -18,
        y: screen > 700 ? -1.3 : -2,
        z: screen > 700 ? -0.5 : -2,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#contact",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      })
      .to(scene.rotation, {
        x: 0,
        y: screen > 700 ? 1.5 : 1.2,
        z: 0,
        ease: "power1.in",
        duration: 5,
        scrollTrigger: {
          trigger: "#contact",
          start: "100px bottom",
          end: "top top",
          scrub: true,
          immediateRender: false,
        },
      });
  }, []);

  return (
    <group ref={roman} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            <group name="mentor_roman_retopo" position={[-0.266, 0.12, 1.326]}>
              <mesh
                name="mentor_roman_retopo_0"
                geometry={nodes.mentor_roman_retopo_0.geometry}
                material={materials.Stone}
              />
            </group>
            <group
              name="Empty"
              position={[0.161, -0.17, 4.808]}
              rotation={[-0.104, 0.099, 0.002]}
              scale={0.892}
            >
              <group name="nimbus002">
                <mesh
                  name="nimbus002_0"
                  geometry={nodes.nimbus002_0.geometry}
                  material={materials.Crown}
                />
              </group>
              <group name="nimbus001">
                <mesh
                  name="nimbus001_0"
                  geometry={nodes.nimbus001_0.geometry}
                  material={materials.Crown}
                />
              </group>
              <group name="nimbus003">
                <mesh
                  name="nimbus003_0"
                  geometry={nodes.nimbus003_0.geometry}
                  material={materials.Crown}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/roman3d.gltf");
